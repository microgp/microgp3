// Inherited class; the Ui_ugpMainWindow might be changed by
// Qt Designer, so the relevant bindings must operate here

#ifndef MICROGPMAINWINDOW
#define MICROGPMAINWINDOW

#include "ui_ugp3-individual-editor.h"

#include <iostream>
#include <map>
#include <memory>

// forward declarations
namespace ugp3
{
	namespace core
	{
		class EnhancedIndividual;
		class EnhancedPopulation;
		class EvolutionaryAlgorithm;
	}
	
	namespace constraints
	{
		class Constraints;
		class Macro;
		class Section;
	}
	
	namespace ctgraph
	{
		class CGraph;
		class CGraphContainer; 
		class CNode;
		class CSubGraph;
	}
}
class QTreeWidgetItem;


namespace Ui 
{

// everything in the Ui_ugpMainWindow is public
// multiple inheritance requires QObject to be first
class MicroGPMainWindow : public QObject, public Ui_individualEditorMainWindow
{

Q_OBJECT

public:
	// pointer to main window
	QMainWindow* mainWindow;
	
	// right-click menu for the tree widget
	QMenu* treeWidgetContextMenu;
	
	// pointer to constraints
	ugp3::constraints::Constraints* constraints;
	// pointer to current individual / cgraphcontainer
	ugp3::core::EnhancedIndividual* currentIndividual;
	// pointer to evolutionary algorithm
	ugp3::core::EvolutionaryAlgorithm* evolutionaryAlgorithm;
	// array of individuals
	std::vector<ugp3::core::EnhancedIndividual*> individuals;
	// pointer to population
	ugp3::core::EnhancedPopulation* population;
	
	// flag map to remember whether individuals have been saved
	std::map<std::string,bool> unsavedMap;
	
	// map that ties the QTreeWidgetItem* to a CNode* inside the individual
	std::map<QTreeWidgetItem*,ugp3::ctgraph::CNode*> treeToNode;
	// map that ties QTreeWidgetItem* to SubGraph* inside the individual
	std::map<QTreeWidgetItem*,ugp3::ctgraph::CSubGraph*> treeToSubGraph;
	// map that ties QTreeWidgetItem* to Graph* inside the individual
	std::map<QTreeWidgetItem*,ugp3::ctgraph::CGraph*> treeToGraph;
	
	// other maps will tie QTreeWidgetItems to graph and subgraph, in order to add subgraphs and macros
	// if a QTreeWidgetItem is not found anywhere, then it's connected to the root (right?), so go to cgraphcontainer!
		

public:
	// initialize window
	void setupUi(QMainWindow* mainWindow);
	// populate all tables
	//void populateAllTables();
	// ask parameters of the macro with a dialogue
	void askMacroParameters(ugp3::ctgraph::CNode* node);
	// create individual step-by-step
	void createIndividual();
	// update individual preview
	void updatePreview();

// slot that will be connected to signals generated by objects
public slots:
	// add a node to a subgraph
	void addNode();
	// add a section
	void addSection();
	// apply an operator and produce individuals
	void applyOperator(QAction*);
	// change current individual
	void changeCurrentIndividual(int index);
	// change macro parameters
	void changeMacroParameters();  
	// exit and de-allocate everything
	void exitAndRelease();
	// load constraints file
	void loadConstraints();
	// load population AND corresponding constraints file
	void loadPopulation();
	// populate subsection table (on click of other table)
	//void populateSubSectionTable(int row, int column);
	// populate macro table (on click of other table)
	//void populateMacroTable(int row, int column);
	// create new individual
	void newIndividual();
	// remove node
	void removeNode();
	// context (right-click) menu for the tree widget
	void rightClickMenuTreeWidget(QPoint pos);
	// save whole algorithm to status file
	void savePopulation();
	// update list widget of individuals
	void updateListWidget();
	// update tree widget with individual structure
	void updateTreeWidget();
	// show "about" message
	void about();
};

} // namespace Ui

#endif
