// Inherited class; the Ui_ugpMainWindow might be changed by
// Qt Designer, so the relevant bindings must operate here

#ifndef MICROGPMAINWINDOW
#define MICROGPMAINWINDOW

// GUI
#include "ui_ugp3-gui.h"

// standard classes
#include <map>
#include <memory>
#include <sstream>
#include <vector>

// classes from ugp3
#include "EvolutionaryAlgorithm.h"

// forward declaration
class QwtPlotZoomer;

// current class declaration
namespace Ui 
{

// forward declaration
class EvolutionThread;

// everything in the Ui_ugpMainWindow is public
// multiple inheritance requires QObject to be first
class MicroGPMainWindow : public QObject, public Ui_MainWindow
{

Q_OBJECT

private:
	// pointer to main window
	QMainWindow* mainWindow;
	
	// name of the constraints file
	QString constraintsFile;
	// name of the population file
	QString populationFile;
	// this might be used to store statistics over time
	std::map< std::string, std::vector< double > > statistics;
	// utility structure that maps indexes to column names
	std::map< unsigned int, std::string > indexToName;
	// and this might be used to store the logging
	ostringstream ssLog;
	// bool used to understand whether the evolution is running
	// TODO maybe remove it?
	bool runningEvolution;
	// reference to the thread
	EvolutionThread* evolutionThread;
	
	// zoomers for the two QwtPlot objects
	QwtPlotZoomer* zoomerLeft;
	QwtPlotZoomer* zoomerRight;

public:
	// pointer to the evolutionary algorithm
	std::unique_ptr<ugp3::core::EvolutionaryAlgorithm> evolutionaryAlgorithm;

	// general setup, followed by all functions that set up the respective tabs
	void setupUi(QMainWindow* ugp3mainWindow);
	
	// reset ALL the things!
	void resetEverything();
	
	// copy text from ostringstream ssLog to textEdit
	void updateTextEdit();
	
	// make a script's path absolute
	const std::string getAbsoluteScript(const std::string dir, const std::string script);
	
	// split a string
	std::vector<std::string> split(const string& str, const string& delimiters);
	
	// run the evolution
	void runEvolution();
	
	// update the statistics
	void updateStatistics(std::ostringstream* stream);

// slot that will be connected to signals generated by objects
public slots:
	// MENU File
	// load evolution from population file
	void loadPopulation();
	// load evolution from status file
	void loadStatus();
	
	// these are slots that catch signals from EvolutionThread
	void pauseEvolution();
	void evolutionTerminated();

	// MENU Evolution
	// start evolutionary process
	void startEvolution();
	// stop evolutionary process
	void stopEvolution();
	
	// MENU Results
	
	// update graphs
	void updateGraph1();
	void updateGraph2();
	void updateStatistics(QString stream);
	
	// warning if we try to start a terminated evolution
	void warningEvolutionStopped();
	
	// open dialog that visualizes the best individual
	void visualizeBestIndividual();

// signals emitted by the class
signals:
	void signalPauseEvolution();
	void signalResetEvolution();
};

} // namespace Ui

#endif
