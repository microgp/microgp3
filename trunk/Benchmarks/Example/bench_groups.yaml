# Benchmark of MicroGP on various group problems

# All string based tests share the same configuration (only the contents of the
# test files change)
common_string_conf: &string_conf
  files: [eval.lua, compat_eval.lua, string-coverage.generator.pl,
    string-coverage.constraints.xml, string-coverage.population.xml,
    ugp3.settings.xml, params.txt]
  precmd: "perl string-coverage.generator.pl $seed"

# Directories of the tests to use for the benchmark, files that determine the
# outcome, and an optional command to run before the script (`$seed` inside the
# command will be replaced with MicroGP's seed for each run of the experiment)
tests:
  lampade_lua:
    files: [eval.lua, compat_eval.lua, parameters.txt, constraints.xml,
      population.settings.xml, ugp3.settings.xml]
  lampade_lua_big:
    files: [eval.lua, compat_eval.lua, parameters.txt, constraints.xml,
      population.settings.xml, ugp3.settings.xml]
  string_coverage_lua_2: *string_conf
  string_coverage_lua_4_bare: *string_conf
  string_coverage_lua_4_indsharing: *string_conf
  string_coverage_lua_4_grsharing: *string_conf
  string_coverage_lua_4_grindsharing: *string_conf
  string_coverage_lua_4_hole: *string_conf
  string_coverage_lua_4_scan: *string_conf
  string_coverage_lua_4_full: *string_conf
  string_coverage_lua_8: *string_conf
  string_coverage_lua_skewed: *string_conf
  string_coverage_lua_skewed_indsharing: *string_conf

# Names of the MicroGP executables to run
ugp_executables:
  - ./ugp3_camellia_r611

# Random seeds to use
seeds: [1, 2, 3, 4, 5, 6, 7, 8]
# seeds: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

# Whether to show the full ugp output or only the generations
full_ugp_output: false

