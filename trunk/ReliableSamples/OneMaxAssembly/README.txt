OneMaxAssembly
--------------
OneMaxAssembly's objective is to find an Assembly program able to set to '1' all bits inside the register AX. The fitness has two elements, the first being the number of bits set to '1' in AX, the second being (1000 - number of lines in the program), as the secondary aim is to minimize program size. As ugp3 is always trying to maximize the fitness values, maximizing (1000 - #numberOfLines) pushes for shorter programs.

The evaluator in this case is a shell file (fitness.sh) that takes a pre-written program in C (main.c) and compiles is together with the Assembly programs generated by ugp3. The Assembly programs represent a function (called "evolved_function()" in the C program) that performs some operations and then returns the number of bits set to '1' inside register AX. Thus, every time the evaluator is called, the Assembly candidate solution created by ugp3 is compiled together with main.c and executed.

Files in this folder
--------------------
cleanup.sh		# simple script that removes all files generated by ugp3, leaving the bare minimum needed to run the sample
constraints.xml.i686	# constraints for 32-bit architectures
constraints.xml.x86_64	# constraints for 64-bit architectures
fitness.sh		# evaluator (shell script)
main.c			# C program used by the evaluator
population.settings.xml	# population settings for ugp3
README.txt		# this file :-D
ugp3.settings.xml	# general settings for ugp3

Running OneMaxAssembly
----------------------
First of all, you need to be sure whether your operative system is 32 or 64-bit. Depending on the architecture, in fact, ugp3 will need to generate a different type of Assembly programs: the type of programs to be generated is described by the constraints.xml.* files. Before running the example, search inside population.settings.xml for the line

<constraints value="constraints.xml.i686"/>

If you have a 32-bit system, change it to <constraints value="constraints.xml.i686"/> ; if you have a 64-bit system, change it to <constraints value="constraints.xml.x86_64"/>

After that, you only need to run ugp3 inside this folder. As the evaluation of a single solution is relatively slow, this experiment can last several minutes: as you will see, at the beginning of the run ugp3 will try to maximize the first fitness function, getting close to 32 (maximum number of bits set to '1' inside AX); after the best individual reaches 32, slowly the whole population will be colonized by individuals that have a similar first fitness, while ugp3 will now start to maximize the second fitness value, slowly reducing the number of lines.
