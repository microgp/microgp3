StringCoverage
--------------
The objective of the problem is to find a group of string templates that contains the highest possible number of "1", while at the same time covering the maximum possible number of binary strings in a test set. Taking for example strings on 8 bits, a template might be: 1*1*1111. A string is matched by a template iff the string presents "1"s in the same position as the template, and either "0" or "1" where the template shows a wildcard "*".

For example, this template 
 1*1*1111
will match all the strings below
 11111111
 10101111
 11101111
 10111111
but not this one
 00101111
 ^
nor this one
 10011111
   ^

An individual in this problem is composed by a variable number of templates (between 1 and 10), where each template is a 32-bit string composed of '1's and '*'s.

The fitness function rewards group of templates presenting a high number of "1"s and a high coverage of the test set. The size of the groups is also taken into account, favouring small groups over big ones. A commentary is added, showing the performance of each template; for example, an individual with fitness:

0.00692374;"#f0=0.005625;f1=0.012890625;f2=0.00140625;f3=0.013203125;f4=0.021484375;f5=0.04375;f6=0.00765625;f7=0.0253125;f8=0.005625;;;182/400"

is covering correctly 182/400 strings (last part of the commentary string). The first template has a fitness of 0.005625, the second template has a fitness of 0.012890625, and so forth: the higher the number, the better the template is. The perfect solution has fitness 

0.25; "#f0=0.25;f1=0.25;->400/400"

with two templates that, together, cover 400/400 strings. The problem, however, is considerably complex, and ugp3 might take some time to reach it and/or fall in a local optimum.

The test set is generated with the PERL script "string-coverage.generator.pl", that uses two 32-bit templates to create 400 strings (found in "testSet.txt"), 200 strings with each template. Thus, in this case the optimal solution is represented by the same two templates that have been used to create the 400 strings in the test set. It is of course possible to modify the PERL generator to use different templates and/or number of strings generated, or use your very own generator to produce a "testSet.txt" file.

This sample and related fitness function have been taken from Wu and Banzhaf, "A hierarchical cooperative evolutionary algorithm", 2010.

Files in this folder
--------------------
cleanup.sh			# simple script that removes all files generated by ugp3, leaving the bare minimum needed to run the sample	
README.txt			# this file :-D	
string-coverage.constraints.xml	# constraints for this sample
string-coverage.evaluator.pl	# evaluator (Perl script)
string-coverage.generator.pl	# file used to generate the test set (testSet.txt)
string-coverage.population.xml	# population settings for ugp3
testSet.txt			# file containing the 400 strings to match
ugp3.settings.xml		# general settings for ugp3

Running StringCoverage
----------------------
In order to run StringCoverage, you need to have a Perl interpreter installed on your system. Perl is installed by default in many Linux distributions (e.g. Ubuntu). Once Perl is installed, you just need to run ugp3 inside the StringCoverage folder.
